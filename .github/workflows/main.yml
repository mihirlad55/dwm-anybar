name: Main CI

on:
  push:
    tags:
    - 'v*'

jobs:
  set-patch-properties:
    runs-on: ubuntu-latest
    outputs:
      patch-name: ${{ steps.capture-properties.outputs.patch-name }}
      update-patch-name: ${{ steps.capture-properties.outputs.update-patch-name }}
      update-notes: ${{ steps.capture-properties.outputs.update-notes }}
      last-tag: ${{ steps.capture-properties.outputs.last-tag }}
      new-tag: ${{ steps.capture-properties.outputs.new-tag }}
    steps:
    - name: Checkout code
      uses: actions/checkout@v2
      with:
        fetch-depth: 0
        ref: unpatched

    - id: capture-properties
      name: Capture patch properties
      run: |
        # Tag on last vanilla dwm commit
        tag="$(git tag --points-at=unpatched)"

        if [[ "$tags" != "" ]]; then
          echo "::set-output name=patch-name::dwm-anybar-${tag}.diff"
        else
          patch_date="$(date +%Y%m%d)"
          patch_hash="$(git rev-parse --short unpatched)"
          echo "::set-output name=patch-name::dwm-anybar-${patch_date}-${patch_hash}.diff"
        fi

        last_tag="$(git tag --sort=committerdate | grep 'v' | tail -n2 | head -n1)"
        echo "::set-output name=last-tag::${last_tag}"

        new_tag="$(git tag --sort=committerdate | grep 'v' | tail -n1)"
        echo "::set-output name=new-tag::${new_tag}"
        echo "::set-output name=update-patch-name::dwm-anybar-${last_tag}-to-${new_tag}.diff"

        update_notes="$(git tag ${new_tag} -n1 --format=%\(body\))"
        # Preserve special characters
        update_notes="${update_notes//'%'/'%25'}"
        update_notes="${update_notes//$'\n'/'%0A'}"
        update_notes="${update_notes//$'\r'/'%0D'}"
        echo "::set-output name=update-notes::${update_notes}"

  build:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v2
      with:
        ref: master

    - name: Install compilation dependencies
      run: sudo apt-get install libx11-dev libxinerama-dev

    - name: Compile
      run: make all


  release:
    runs-on: ubuntu-latest
    outputs:
      upload-url: ${{ steps.create-release.outputs.upload_url }}
    steps:
    - name: Checkout code
      uses: actions/checkout@v2
      with:
        ref: ${{ github.ref }}

    - name: Create release
      id: create-release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ github.ref }}
        release_name: Anybar Patch ${{ github.ref }}
        draft: false
        prerelease: false


  generate-patch:
    needs: [set-patch-properties, release]
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v2
      with:
        fetch-depth: 0
        ref: unpatched

    - name: Set git username and email
      run: |
          git config user.email "$GIT_AUTHOR_EMAIL"
          git config user.name "$GITHUB_ACTOR"
      env:
        GIT_AUTHOR_EMAIL: mihirlad55@gmail.com

    - name: Create clean temporary branch
      run: git checkout -B temp

    - name: Squash master into branch temp
      run: git merge --squash origin/master

    - name: Make patch commit
      run: echo "$COMMIT_MESSAGE" | git commit -F -
      env:
        COMMIT_MESSAGE: |
          Add support for managing external status bars

          This patch allows dwm to manage other status bars such as
          polybar/lemonbar without them needing to set override-redirect. For
          all intents and purposes, DWM treats this bar as if it were its own
          and as a result helps the status bar and DWM live in harmony.

          This has a few advantages
          * The bar does not block fullscreen windows
          * DWM makes room for the status bar, so windows do not overlap the bar
          * The bar can be hidden/killed and DWM will not keep an unsightly gap
            where the bar was
          * DWM receives EnterNotify events when your cursor enters the bar

          To use another status bar, set usealtbar to 1 in your config.h and set
          altbarclass to the class name (can be found using xprop) to the class
          name of your status bar. Also make sure that if your status bar will
          be displayed on top, topbar is set to 1 in your config, and if it will
          be displayed on bottom, topbar is set to 0. This patch does not
          support bars that are not docked at the top or at the bottom of your
          monitor.

          The patch is developed at https://github.com/mihirlad55/dwm-anybar

    - name: Generate patch
      run: git format-patch --stdout HEAD^ ':(exclude).github' ':(exclude)README' ':(exclude)README.md' > "$PATCH_NAME"
      env:
        PATCH_NAME: ${{ needs.set-patch-properties.outputs.patch-name }}

    - name: Upload patch asset
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ needs.release.outputs.upload-url }}
        asset_path: ${{ github.workspace }}/${{ needs.set-patch-properties.outputs.patch-name }}
        asset_name: ${{ needs.set-patch-properties.outputs.patch-name }}
        asset_content_type: text/plain

    - uses: actions/upload-artifact@v2
      with:
        name: ${{ needs.set-patch-properties.outputs.patch-name }}
        path: ${{ github.workspace }}/${{ needs.set-patch-properties.outputs.patch-name }}


  generate-update-patch:
    needs: [set-patch-properties, release]
    runs-on: ubuntu-latest
    steps:
    - name: Checkout last tag
      uses: actions/checkout@v2
      with:
        fetch-depth: 0
        ref: ${{ needs.set-patch-properties.outputs.last-tag }}

    - name: Set git username and email
      run: |
          git config user.email "$GIT_AUTHOR_EMAIL"
          git config user.name "$GITHUB_ACTOR"
      env:
        GIT_AUTHOR_EMAIL: mihirlad55@gmail.com

    - name: Create clean temporary branch
      run: git checkout -B temp

    - name: Squash master into branch temp
      run: git merge --squash origin/master

    - name: Make update patch commit
      run: echo "$COMMIT_MESSAGE" | git commit -F -
      env:
        COMMIT_MESSAGE: |
            Update from ${{ needs.set-patch-properties.outputs.last-tag }} to ${{ needs.set-patch-properties.outputs.new-tag }}

            ${{ needs.set-patch-properties.outputs.update-notes }}

    - name: Generate update patch
      run: git format-patch --stdout HEAD^ ':(exclude).github' ':(exclude)README' ':(exclude)README.md' > "$UPDATE_PATCH_NAME"
      env:
        LAST_TAG: ${{ needs.set-patch-properties.outputs.last-tag }}
        UPDATE_PATCH_NAME: ${{ needs.set-patch-properties.outputs.update-patch-name }}

    - name: Upload update patch asset
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ needs.release.outputs.upload-url }}
        asset_path: ${{ github.workspace }}/${{ needs.set-patch-properties.outputs.update-patch-name }}
        asset_name: ${{ needs.set-patch-properties.outputs.update-patch-name }}
        asset_content_type: text/plain

    - uses: actions/upload-artifact@v2
      with:
        name: ${{ needs.set-patch-properties.outputs.update-patch-name }}
        path: ${{ github.workspace }}/${{ needs.set-patch-properties.outputs.update-patch-name }}
